restable_AICc_rellike
free_params = row.names(resDECj$output@params_table[resDECj$output@params_table$type=="free",])
names(restable_AICc_rellike) = c("LnL", "numparams", free_params, "AICc", "AICc_wt")
# Also save to text files
write.table(restable_AIC_rellike, file="restable_AIC_rellike.txt", quote=FALSE, sep="\t")
write.table(restable_AICc_rellike, file="restable_AICc_rellike.txt", quote=FALSE, sep="\t")
# Save with nice conditional formatting
write.table(conditional_format_table(restable_AIC_rellike), file="restable_AIC_rellike_formatted.txt", quote=FALSE, sep="\t")
write.table(conditional_format_table(restable_AICc_rellike), file="restable_AICc_rellike_formatted.txt", quote=FALSE, sep="\t")
install.packages("installr")
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
set.seed(1859)
options(repos="http://cran.r-project.org")
pp.recon = MarginRecon(phy, sim.dat, f=c(1,1), hidden.states=TRUE, pars=pp$solution,
aic=pp$aic, n.cores=2)
pp.recon$aic
library(phytools)
install.packages("phytools")
install.packages("phytools")
install.packages("phytools")
library(phytools)
library(geiger)
source("fitPagel.R")
.check.pkg<-phytools:::.check.pkg
tree<-pbtree(n=300,scale=1)
Q<-matrix(c(-1,1,1,-1),2,2)
rownames(Q)<-colnames(Q)<-letters[1:2]
ttl<-sim.history(tree,Q)
View(Q)
tt2<-sim.history(tree,Q)
par(mfrow=c(1,2))
plotSimmap(tt1,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt2,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
par(mfrow=c(1,2))
plotSimmap(ttl,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt2,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
x<-ttl$states
y<-tt2$states
fit.ape<-fitPagel(tree,x,y)
fit.ape
fit.geiger<-fitPagel(tree,x,y,method="fitDiscrete")
fit.geiger
Q<-matrix(c(0,0.5,0.5,0,2,0,0,2,2,0,0,2,0,0.5,0.5,0),4,4,byrow=TRUE)
rownames(Q)<-colnames(Q)<-c("aa","ab","ba","bb")
diag(Q)<--rowSums(Q)
tt<-sim.history(tree,t(Q))
tt1<-mergeMappedStates(tt,c("aa","ab"),"a")
tt1<-mergeMappedStates(tt1,c("ba","bb"),"b")
tt2<-mergeMappedStates(tt,c("aa","ba"),"a")
tt2<-mergeMappedStates(tt2,c("ab","bb"),"b")
par(mfrow=c(1,2))
plotSimmap(tt1,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt2,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
x<-getStates(tt1,"tips")
y<-getStates(tt2,"tips")
fit.ape<-fitPagel(tree,x,y)
fit.ape
fit.geiger<-fitPagel(tree,x,y,method="fitDiscrete")
fit.geiger
tree2<-pbtree(n=18,scale=1)
Q<-matrix(c(-1,1,1,-1),2,2)
rownames(Q)<-colnames(Q)<-letters[1:2]
tt3<-sim.history(tree,Q)
tt2<-sim.history(tree,Q)
par(mfrow=c(1,2))
plotSimmap(tt3,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt4,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
tree<-pbtree(n=300,scale=1)
Q<-matrix(c(-1,1,1,-1),2,2)
rownames(Q)<-colnames(Q)<-letters[1:2]
ttl<-sim.history(tree,Q)
tt2<-sim.history(tree,Q)
##These are uncorrelated, see:
par(mfrow=c(1,2))
plotSimmap(ttl,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt2,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
x<-ttl$states
y<-tt2$states
fit.ape<-fitPagel(tree,x,y)
fit.ape
fit.geiger<-fitPagel(tree,x,y,method="fitDiscrete")
fit.geiger
##Let's try correlated data
#Need to simulate some data
Q<-matrix(c(0,0.5,0.5,0,2,0,0,2,2,0,0,2,0,0.5,0.5,0),4,4,byrow=TRUE)
rownames(Q)<-colnames(Q)<-c("aa","ab","ba","bb")
diag(Q)<--rowSums(Q)
tt<-sim.history(tree,t(Q))
tt1<-mergeMappedStates(tt,c("aa","ab"),"a")
tt1<-mergeMappedStates(tt1,c("ba","bb"),"b")
tt2<-mergeMappedStates(tt,c("aa","ba"),"a")
tt2<-mergeMappedStates(tt2,c("ab","bb"),"b")
## these data are correlated, see:
par(mfrow=c(1,2))
plotSimmap(tt1,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt2,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
x<-getStates(tt1,"tips")
y<-getStates(tt2,"tips")
fit.ape<-fitPagel(tree,x,y)
fit.ape
fit.geiger<-fitPagel(tree,x,y,method="fitDiscrete")
fit.geiger
##This model is really slow-thought my computer was broken at points-is there a way to speed it up?
###Bad news that this exists already though and spits everything out that you could want. Totally cool to see it in code though.
##Try again
tree2<-pbtree(n=18,scale=1)
Q<-matrix(c(-1,1,1,-1),2,2)
rownames(Q)<-colnames(Q)<-letters[1:2]
tt3<-sim.history(tree,Q)
tt4<-sim.history(tree,Q)
par(mfrow=c(1,2))
plotSimmap(tt3,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt4,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
tree2<-pbtree(n=18,scale=1)
Q<-matrix(c(-1,1,1,-1),2,2)
rownames(Q)<-colnames(Q)<-letters[1:2]
tt3<-sim.history(tree,Q)
tt4<-sim.history(tree,Q)
par(mfrow=c(1,2))
plotSimmap(tt3,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt4,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
rownames(Q)<-colnames(Q)<-letters[1:2]
tt3<-sim.history(tree,Q)
tt3<-sim.history(tree2,Q)
tt4<-sim.history(tree2,Q)
par(mfrow=c(1,2))
plotSimmap(tt3,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt4,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
x<-ttl$states
y<-tt2$states
fit.ape<-fitPagel(tree,x,y)
fit.ape
fit.geiger<-fitPagel(tree,x,y,method="fitDiscrete")
fit.geiger
library(phytools)
library(geiger)
x<-tt3$states
y<-tt4$states
fit.ape<-fitPagel(tree,x,y)
fit.ape
fit.geiger<-fitPagel(tree,x,y,method="fitDiscrete")
fit.geiger
fit.ape<-fitPagel(tree,x,y)
fit.ape<-fitPagel(tree2,x,y)
fit.ape
fit.geiger<-fitPagel(tree2,x,y,method="fitDiscrete")
fit.geiger
install.packages("phytools")
library(phytools)
library(geiger)
tree<-pbtree(n=300,scale=1)
Q<-matrix(c(0,1,1,0),2,2)
rownames(Q)<-colnames(Q)<-letters[1:2]
ttl<-sim.history(tree,Q)
tt2<-sim.history(tree,Q)
##These are uncorrelated, see:
par(mfrow=c(1,2))
plotSimmap(ttl,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt2,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
x<-ttl$states
y<-tt2$states
fit.ape<-fitPagel(tree,x,y)
fit.ape
fit.geiger<-fitPagel(tree,x,y,method="fitDiscrete")
fit.geiger
#Correlated Data Set
tree<-pbtree(n=300,scale=1)
Q<-matrix(c(0,0.5,0.5,0,2,0,0,2,2,0,0,2,0,0.5,0.5,0),4,4,byrow=TRUE)
rownames(Q)<-colnames(Q)<-c("aa","ab","ba","bb")
diag(Q)<--rowSums(Q)
tt<-sim.history(tree,t(Q))
tt1<-mergeMappedStates(tt,c("aa","ab"),"a")
tt1<-mergeMappedStates(tt1,c("ba","bb"),"b")
tt2<-mergeMappedStates(tt,c("aa","ba"),"a")
tt2<-mergeMappedStates(tt2,c("ab","bb"),"b")
## these data are correlated, see:
par(mfrow=c(1,2))
plotSimmap(tt1,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt2,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
x<-getStates(tt1,"tips")
y<-getStates(tt2,"tips")
fit.ape<-fitPagel(tree,x,y)
fit.ape
fit.geiger<-fitPagel(tree,x,y,method="fitDiscrete")
fit.geiger
plot.fitPagel
??fitPagel
treeA<-pbtree(n=300,scale=1)
QA<-matrix(c(0,1,1,0),2,2)
rownames(QA)<-colnames(QA)<-letters[1:2]
tt3<-sim.history(treeA,QA)
tt4<-sim.history(treeA,QA)
par(mfrow=c(1,2))
plotSimmap(tt3,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt4,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
xA<-tt3$states
yA<-tt4$states
fit.apeA<-fitPagel(treeA,xA,yA)
fit.apeA
fit.geigerA<-fitPagel(treeA,xA,yA,method="fitMk")
fit.geigerA
treeB<-pbtree(n=300,scale=1)
QB<-matrix(c(0,0.5,0.5,0,2,0,0,2,2,0,0,2,0,0.5,0.5,0),4,4,byrow=TRUE)
rownames(QB)<-colnames(QB)<-c("aa","ab","ba","bb")
diag(QB)<--rowSums(QB)
tt<-sim.history(treeB,t(QB))
tt3<-mergeMappedStates(tt,c("aa","ab"),"a")
tt3<-mergeMappedStates(tt3,c("ba","bb"),"b")
tt4<-mergeMappedStates(tt,c("aa","ba"),"a")
tt4<-mergeMappedStates(tt4,c("ab","bb"),"b")
## these data are correlated, see:
par(mfrow=c(1,2))
plotSimmap(tt3,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1)
plotSimmap(tt4,setNames(c("blue","red"),letters[1:2]),ftype="off",lwd=1,direction="leftwards")
xB<-getStates(tt1,"tips")
yB<-getStates(tt2,"tips")
fit.apeB<-fitPagel(treeB,xB,yB)
fit.apeB
fit.geigerB<-fitPagel(treeB,xB,yB,method="fitMk")
fit.geigerB
??mergeMappedStates
setwd("~/Desktop/phylometh2/exercises/project")
expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))
?igraph
library(igraph)
?igraph
library(igraph)
combos <- expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))
g <- make_empty_graph()
g <- add.vertices(g, nrow(combos))
plot(g)
library(igraph)
combos <- expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))
g <- make_empty_graph()
g <- add.vertices(g, nrow(combos), name = apply(combos, 1, paste, collapse=""))
plot(g)
library(igraph)
GetDistances <- function(pair) {
distance=0
for (i in sequence(ncol(pair))) {
if(pair[1,i]==pair[2,i]) {
distance=distance+1
}
}
return(distance)
}
combos <- expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))
g <- make_empty_graph()
g <- add.vertices(g, nrow(combos), name = apply(combos, 1, paste, collapse=""))
plot(g)
for (start.node in sequence(nrow(combos)-1)) {
for (end.node in (start.node+1):(nrow(combos)-1))
if(GetDistances(combos[c(start.node, end.node),])==1) {
g <- add.edges(g, c(start.node, end.node))
}
}
g
library(igraph)
GetDistances <- function(pair) {
distance=0
for (i in sequence(ncol(pair))) {
if(pair[1,i]==pair[2,i]) {
distance=distance+1
}
}
return(distance)
}
combos <- expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))
g <- make_empty_graph()
g <- add.vertices(g, nrow(combos), name = apply(combos, 1, paste, collapse=""))
for (start.node in sequence(nrow(combos)-1)) {
for (end.node in (start.node+1):(nrow(combos)-1))
if(GetDistances(combos[c(start.node, end.node),])==1) {
g <- add.edges(g, c(start.node, end.node))
}
}
plot(g)
library(igraph)
GetDistances <- function(pair) {
distance=0
for (i in sequence(ncol(pair))) {
if(pair[1,i]==pair[2,i]) {
distance=distance+1
}
}
return(distance)
}
combos <- expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))
g <- make_empty_graph()
g <- add.vertices(g, nrow(combos), name = apply(combos, 1, paste, collapse=""))
for (start.node in sequence(nrow(combos))) {
for (end.node in (start.node+1):(nrow(combos)-1))
if(GetDistances(combos[c(start.node, end.node),])==1) {
g <- add.edges(g, c(start.node, end.node))
}
}
plot(g)
library(igraph)
GetDistances <- function(pair) {
distance=0
for (i in sequence(ncol(pair))) {
if(pair[1,i]==pair[2,i]) {
distance=distance+1
}
}
return(distance)
}
combos <- expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))
g <- make_empty_graph()
g <- add.vertices(g, nrow(combos), name = apply(combos, 1, paste, collapse=""))
for (start.node in sequence(nrow(combos))) {
for (end.node in sequence(nrow(combos)))
if(GetDistances(combos[c(start.node, end.node),])==1) {
g <- add.edges(g, c(start.node, end.node))
}
}
plot(g)
?plot.igraph
plot(g, arrow.mode=0)
plot.igraph(g, arrow.mode=0)
plot.igraph(g, edge.arrow.mode=0)
library(igraph)
GetDistances <- function(pair) {
print(pair)
distance=0
for (i in sequence(ncol(pair))) {
if(pair[1,i]==pair[2,i]) {
distance=distance+1
}
}
print(distance)
return(distance)
}
combos <- expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))
g <- make_empty_graph()
g <- add.vertices(g, nrow(combos), name = apply(combos, 1, paste, collapse=""))
for (start.node in sequence(nrow(combos))) {
for (end.node in sequence(nrow(combos)))
if(GetDistances(combos[c(start.node, end.node),])==1) {
g <- add.edges(g, c(start.node, end.node))
}
}
plot.igraph(g, edge.arrow.mode=0)
library(igraph)
GetDistances <- function(pair) {
print(pair)
distance=0
for (i in sequence(ncol(pair))) {
if(pair[1,i]!=pair[2,i]) {
distance=distance+1
}
}
print(distance)
return(distance)
}
combos <- expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))
g <- make_empty_graph()
g <- add.vertices(g, nrow(combos), name = apply(combos, 1, paste, collapse=""))
for (start.node in sequence(nrow(combos))) {
for (end.node in sequence(nrow(combos)))
if(GetDistances(combos[c(start.node, end.node),])==1) {
g <- add.edges(g, c(start.node, end.node))
}
}
plot.igraph(g, edge.arrow.mode=0)
dQ
dQ<-matrix(c(0,1,2,0,3,0,0,4,5,0,0,1,0,6,3,0),12,12,byrow=TRUE)
dQ
?fit.pagel
?fitPagel
?phytools::fitPagel
phytools::fitPagel
dQ <- matrix(c(0, 1, 2, 0, 3, 0, 0, 4, 5, 0, 0, 1, 0,
6, 3, 0), 4, 4, byrow = TRUE)
dQ
## Dependent model rate matrix:
##            a|a        a|b        b|a        b|b
## a|a -0.5951317  0.3393103  0.2558215  0.0000000
## a|b  4.6486390 -4.7698708  0.0000000  0.1212318
## b|a  2.2086339  0.0000000 -4.5275279  2.3188940
## b|b  0.0000000  0.4113254  0.3105573 -0.7218827
g
g$eges
g$edges
WhichAreDifferent <- function(pair) {
distance=0
which.different=c()
for (i in sequence(ncol(pair))) {
if(pair[1,i]!=pair[2,i]) {
distance=distance+1
which.different <- c(which.different, i)
}
}
return(which.different)
}
WhichAreDifferent(matrix("a", "a", "b", "a", "a", "a"),nrow=2, byRow=TRUE))
WhichAreDifferent(matrix(c("a", "a", "b", "a", "a", "a"),nrow=2, byRow=TRUE))
?matrix
WhichAreDifferent(matrix(c("a", "a", "b", "a", "a", "a"),nrow=2, byrow=TRUE))
(matrix(c("a", "a", "b", "a", "a", "a"),nrow=2, byrow=TRUE)
)
WhichAreDifferent(matrix(c("b", "a", "b", "a", "a", "a"),nrow=2, byrow=TRUE))
combos=expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c")
)
Q <- matrix(0, nrow=nrow(combos), ncol=nrow(combos))
Q
MakeQMatrix <- function(dep.var="", combos=expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))) {
Q <- matrix(0, nrow=nrow(combos), ncol=nrow(combos))
for (start.node in sequence(nrow(combos))) {
for (end.node in sequence(nrow(combos))) {
if(GetDistances(combos[c(start.node, end.node),])==1) {
if(dep.var=="") {
Q[start.node, end.node] <- 1+max(Q)
}
}
}
}
return(Q)
}
MakeQMatrix()
MakeQMatrix <- function(dep.var="", combos=expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))) {
Q <- matrix(0, nrow=nrow(combos), ncol=nrow(combos))
for (start.node in sequence(nrow(combos))) {
for (end.node in sequence(nrow(combos))) {
if(GetDistances(combos[c(start.node, end.node),])==1) {
if(dep.var=="") {
Q[start.node, end.node] <- 1+max(Q)
}
if(dep.var="x") {
different.one <- WhichAreDifferent(combos[c(start.node, end.node),])
}
}
}
}
return(Q)
}
library(igraph)
GetDistances <- function(pair) {
print(pair)
distance=0
for (i in sequence(ncol(pair))) {
if(pair[1,i]!=pair[2,i]) {
distance=distance+1
}
}
print(distance)
return(distance)
}
WhichAreDifferent <- function(pair) {
distance=0
which.different=c()
for (i in sequence(ncol(pair))) {
if(pair[1,i]!=pair[2,i]) {
distance=distance+1
which.different <- c(which.different, i)
}
}
return(which.different)
}
MakeQMatrix <- function(dep.var="", combos=expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))) {
Q <- matrix(0, nrow=nrow(combos), ncol=nrow(combos))
for (start.node in sequence(nrow(combos))) {
for (end.node in sequence(nrow(combos))) {
if(GetDistances(combos[c(start.node, end.node),])==1) {
if(dep.var=="") {
Q[start.node, end.node] <- 1+max(Q)
}
if(dep.var="x") {
different.one <- WhichAreDifferent(combos[c(start.node, end.node),])
}
}
}
}
return(Q)
}
combos <- expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))
g <- make_empty_graph()
g <- add.vertices(g, nrow(combos), name = apply(combos, 1, paste, collapse=""))
for (start.node in sequence(nrow(combos))) {
for (end.node in sequence(nrow(combos)))
if(GetDistances(combos[c(start.node, end.node),])==1) {
g <- add.edges(g, c(start.node, end.node))
}
}
plot.igraph(g, edge.arrow.mode=0)
MakeQMatrix <- function(dep.var="", combos=expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))) {
Q <- matrix(0, nrow=nrow(combos), ncol=nrow(combos))
for (start.node in sequence(nrow(combos))) {
for (end.node in sequence(nrow(combos))) {
if(GetDistances(combos[c(start.node, end.node),])==1) {
if(dep.var=="") {
Q[start.node, end.node] <- 1+max(Q)
}
if(dep.var="x") {
different.one <- WhichAreDifferent(combos[c(start.node, end.node),])
return(Q)
}
MakeQMatrix <- function(dep.var="", combos=expand.grid(x=c("a","b"), y=c("a", "b"), z=c("a", "b", "c"))) {
Q <- matrix(0, nrow=nrow(combos), ncol=nrow(combos))
for (start.node in sequence(nrow(combos))) {
for (end.node in sequence(nrow(combos))) {
if(GetDistances(combos[c(start.node, end.node),])==1) {
if(dep.var=="") {
Q[start.node, end.node] <- 1+max(Q)
}
if(dep.var="x") {
different.one <- WhichAreDifferent(combos[c(start.node, end.node),])
}
}
}
}
return(Q)
